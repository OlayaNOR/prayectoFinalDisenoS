/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package controller;

import dto.TareaDTO;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.sql.SQLException;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import service.TareaService;


public class VentanaGestionTareasAdmin extends javax.swing.JFrame {
    
    private TareaService tareaService;

    /**
     * Creates new form VentanaGestionTareasAdmin
     */
    public VentanaGestionTareasAdmin() {
        initComponents();
        setLocationRelativeTo(this);
        tareaService = new TareaService();
        rellenarPorHacer();
        rellenarHechas();
        rellenarHaciendo();
        verTareaPorHacer();
        verTareaHaciendo();
        verTareaHecha();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblHechas = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblHaciendo = new javax.swing.JTable();
        jScrollPane3 = new javax.swing.JScrollPane();
        tblPorHacer = new javax.swing.JTable();
        btnAtras = new javax.swing.JButton();
        btnNuevo = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Gestion Tareas"));

        tblHechas.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Title 1"
            }
        ));
        jScrollPane1.setViewportView(tblHechas);

        tblHaciendo.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Title 1"
            }
        ));
        jScrollPane2.setViewportView(tblHaciendo);

        tblPorHacer.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Title 1"
            }
        ));
        jScrollPane3.setViewportView(tblPorHacer);

        btnAtras.setText("INICIO");
        btnAtras.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAtrasActionPerformed(evt);
            }
        });

        btnNuevo.setText("NUEVA TAREA");
        btnNuevo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNuevoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 174, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(26, 26, 26)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 174, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 27, Short.MAX_VALUE)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 174, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnAtras, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(btnNuevo, javax.swing.GroupLayout.Alignment.TRAILING))))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addComponent(btnAtras)
                .addGap(24, 24, 24)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 304, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 304, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 304, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnNuevo)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnAtrasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAtrasActionPerformed
        VentanaAdmin vtnA = new VentanaAdmin();
        vtnA.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_btnAtrasActionPerformed

    private void btnNuevoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNuevoActionPerformed
        VentanaNuevaTareaAdmin vnt = new VentanaNuevaTareaAdmin();
        vnt.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_btnNuevoActionPerformed
    
    private void rellenarPorHacer(){
        try {
            DefaultTableModel model = new DefaultTableModel();
            String[] columns = new String[1];
            columns[0] = "POR HACER";
            
            model.setColumnIdentifiers(columns);
            String[] rows = new String[1];
            
            for (int i = 0; i < tareaService.obtenerTareas().size(); i++) {
                TareaDTO tarea = tareaService.obtenerTareas().get(i);
                if(tarea.getEstado().equals("POR HACER")) {
                    rows[0] = tarea.getTitulo();
                    model.addRow(rows);
                }
            }
            tblPorHacer.setModel(model);
        }catch(SQLException e) {
            e.getMessage();
        }
    }
    
    private void rellenarHaciendo(){
        try {
            DefaultTableModel model = new DefaultTableModel();
            String[] columns = new String[1];
            columns[0] = "HACIENDO";
            
            model.setColumnIdentifiers(columns);
            String[] rows = new String[1];
            
            for (int i = 0; i < tareaService.obtenerTareas().size(); i++) {
                TareaDTO tarea = tareaService.obtenerTareas().get(i);
                if(tarea.getEstado().equals("HACIENDO")) {
                    rows[0] = tarea.getTitulo();
                    model.addRow(rows);
                }
            }
            tblHaciendo.setModel(model);
        }catch(SQLException e) {
            e.getMessage();
        }
    }
    
    private void rellenarHechas(){
        try {
            DefaultTableModel model = new DefaultTableModel();
            String[] columns = new String[1];
            columns[0] = "REALIZADA";
            
            model.setColumnIdentifiers(columns);
            String[] rows = new String[1];
            
            for (int i = 0; i < tareaService.obtenerTareas().size(); i++) {
                TareaDTO tarea = tareaService.obtenerTareas().get(i);
                if(tarea.getEstado().equals("REALIZADA")) {
                    rows[0] = tarea.getTitulo();
                    model.addRow(rows);
                }
            }
            tblHechas.setModel(model);
        }catch(SQLException e) {
            e.getMessage();
        }
    }
    
    private void verTareaPorHacer(){
        tblPorHacer.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                int row = tblPorHacer.getSelectedRow(); 
                if (row != -1) { 
                    String titulo = tblPorHacer.getValueAt(row, 0).toString();
                    try {
                        TareaDTO t = tareaService.findByTitulo(titulo);
                        
                        String mensaje = "TAREA POR HACER" + 
                            "\n ID TAREA: " + t.getId() + 
                            "\n TITULO: " + t.getTitulo() + 
                            "\n DESCRIPCION: " + t.getDescripcion() +
                            "\n ENCARGADO: " + t.getEncargado().getNombre() + 
                            "\n PRIORIDAD: " + t.getPrioridad() +
                            "\n TIEMPO ESTIMADO: " + t.getTiempoEstimado() + 
                            "\n COMENTARIOS: " + t.getComentarios();

                        JOptionPane.showMessageDialog(null, mensaje);
                    }catch(SQLException ex) {
                        ex.getMessage();
                    }
                }
            }
        });
    }
    
    private void verTareaHaciendo(){
        tblHaciendo.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                int row = tblHaciendo.getSelectedRow(); 
                if (row != -1) { 
                    String titulo = tblHaciendo.getValueAt(row, 0).toString();
                    try {
                        TareaDTO t = tareaService.findByTitulo(titulo);
                        
                        String mensaje = "TAREA EN PROCESO" + 
                            "\n ID TAREA: " + t.getId() + 
                            "\n TITULO: " + t.getTitulo() + 
                            "\n DESCRIPCION: " + t.getDescripcion() +
                            "\n ENCARGADO: " + t.getEncargado().getNombre() + 
                            "\n PRIORIDAD: " + t.getPrioridad() +
                            "\n TIEMPO ESTIMADO: " + t.getTiempoEstimado() + 
                            "\n COMENTARIOS: " + t.getComentarios();

                        JOptionPane.showMessageDialog(null, mensaje);
                    }catch(SQLException ex) {
                        ex.getMessage();
                    }
                }
            }
        });
    }
    
    private void verTareaHecha(){
        tblHechas.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                int row = tblHechas.getSelectedRow(); 
                if (row != -1) { 
                    String titulo = tblHechas.getValueAt(row, 0).toString();
                    try {
                        TareaDTO t = tareaService.findByTitulo(titulo);
                        
                        String mensaje = "TAREA REALIZADA" + 
                            "\n ID TAREA: " + t.getId() + 
                            "\n TITULO: " + t.getTitulo() + 
                            "\n DESCRIPCION: " + t.getDescripcion() +
                            "\n ENCARGADO: " + t.getEncargado().getNombre() + 
                            "\n PRIORIDAD: " + t.getPrioridad() +
                            "\n TIEMPO ESTIMADO: " + t.getTiempoEstimado() + 
                            "\n COMENTARIOS: " + t.getComentarios();

                        JOptionPane.showMessageDialog(null, mensaje);
                    }catch(SQLException ex) {
                        ex.getMessage();
                    }
                }
            }
        });
    }
    
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAtras;
    private javax.swing.JButton btnNuevo;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTable tblHaciendo;
    private javax.swing.JTable tblHechas;
    private javax.swing.JTable tblPorHacer;
    // End of variables declaration//GEN-END:variables
}
